import 'dart:typed_data';
import 'package:bs58/bs58.dart';
import 'package:moontree_utils/extensions/uint8list.dart';

class Chaindata {
  static final Map<String, Chaindata> nameToChainMap = {};
  static final Map<String, Map<String, int>> addressType = {
    'ravencoin_mainnet': {'p2pkhPrefix': 60, 'p2shPrefix': 122},
    'ravencoin_testnet': {'p2pkhPrefix': 111, 'p2shPrefix': 196},
    'evrmore_mainnet': {'p2pkhPrefix': 33, 'p2shPrefix': 92},
    'evrmore_testnet': {'p2pkhPrefix': 111, 'p2shPrefix': 196},
  };
  factory Chaindata.from(String name) => getChaindataFor(name);

  final String name;
  final String? symbol;
  int id = -1;

  final int defaultPort;

  final int p2pkhPrefix;
  final int p2shPrefix;

  final int kawpowHeaderActivationTimestamp;

  Uint8List assetLiteral;

  final int uniquification;

  final BurnH160 burnH160s;
  final BurnAmount burnAmounts;

  Chaindata(
    this.name,
    this.p2pkhPrefix,
    this.p2shPrefix,
    this.defaultPort,
    this.kawpowHeaderActivationTimestamp,
    this.assetLiteral, {
    this.symbol,
    this.uniquification = 0,
    required this.burnH160s,
    required this.burnAmounts,
  }) {
    nameToChainMap[name] = this;
  }

  Uint8List txidUniquifier(Uint8List raw) {
    if (uniquification != 0) {
      return Uint8List.fromList(raw.map((e) => e ^ uniquification).toList());
    }
    return raw;
  }

  @override
  bool operator ==(Object other) => other is Chaindata && other.name == name;

  @override
  int get hashCode => name.hashCode;
}

class BurnH160 {
  final Uint8List issueMain;
  final Uint8List reissue;
  final Uint8List issueSub;
  final Uint8List issueUnique;
  final Uint8List issueMessage;
  final Uint8List issueQualifier;
  final Uint8List issueSubQualifier;
  final Uint8List issueRestricted;
  final Uint8List addTag;
  final Uint8List burn;

  BurnH160({
    required this.issueMain,
    required this.reissue,
    required this.issueSub,
    required this.issueUnique,
    required this.issueMessage,
    required this.issueQualifier,
    required this.issueSubQualifier,
    required this.issueRestricted,
    required this.addTag,
    required this.burn,
  });

  // Note this does not validate address correctness
  static String addressToH160(String address) {
    final decoded = base58.decode(address);
    final snipped = decoded.sublist(1, decoded.length - 4);
    //return [for (final x in snipped) x.toRadixString(16)].join();
    return snipped.toHex();
  }
}

class BurnAmount {
  // In satoshis
  final int issueMain;
  final int reissue;
  final int issueSub;
  final int issueUnique;
  final int issueMessage;
  final int issueQualifier;
  final int issueSubQualifier;
  final int issueRestricted;
  final int addTag;

  const BurnAmount({
    required this.issueMain,
    required this.reissue,
    required this.issueSub,
    required this.issueUnique,
    required this.issueMessage,
    required this.issueQualifier,
    required this.issueSubQualifier,
    required this.issueRestricted,
    required this.addTag,
  });
}

final ravencoinMainnetChaindata = Chaindata('ravencoin_mainnet', 60, 122, 8766,
    1588788000, Uint8List.fromList([0x72, 0x76, 0x6e]),
    symbol: 'RVN',
    burnH160s: BurnH160(
      issueMain: Uint8List.fromList([
        0xf6,
        0x2e,
        0x63,
        0xb9,
        0x33,
        0x95,
        0x3a,
        0x68,
        0x0f,
        0x3c,
        0x3a,
        0x63,
        0x32,
        0x49,
        0x48,
        0x29,
        0x3b,
        0xa4,
        0x7d,
        0x16
      ]),
      reissue: Uint8List.fromList([
        0xf2,
        0xec,
        0x56,
        0x1c,
        0x77,
        0x43,
        0x5e,
        0x1e,
        0x6a,
        0x43,
        0xe1,
        0x19,
        0x20,
        0x36,
        0x8c,
        0x9c,
        0x8a,
        0x41,
        0xc5,
        0xa4
      ]),
      issueSub: Uint8List.fromList([
        0xf6,
        0x2e,
        0x63,
        0xb9,
        0x47,
        0x6b,
        0xac,
        0x1b,
        0x93,
        0x28,
        0x32,
        0x6d,
        0x66,
        0x8f,
        0xa0,
        0x18,
        0xc7,
        0x22,
        0x0a,
        0xde
      ]),
      issueUnique: Uint8List.fromList([
        0xf6,
        0x2e,
        0x63,
        0xb9,
        0x49,
        0xbf,
        0xca,
        0xd8,
        0x25,
        0x8f,
        0xbc,
        0x0d,
        0x9e,
        0x4d,
        0x8f,
        0x71,
        0xb6,
        0x47,
        0x96,
        0xbe
      ]),
      issueMessage: Uint8List.fromList([
        0xf6,
        0x2e,
        0x63,
        0xb9,
        0x41,
        0x31,
        0x22,
        0xf1,
        0x91,
        0xbc,
        0x7e,
        0x35,
        0x57,
        0x40,
        0x8a,
        0x5d,
        0x68,
        0xde,
        0x66,
        0xe7
      ]),
      issueQualifier: Uint8List.fromList([
        0xf6,
        0x2e,
        0x63,
        0xb9,
        0x44,
        0xf1,
        0xf5,
        0xca,
        0xda,
        0xdc,
        0x3f,
        0xea,
        0xc5,
        0x58,
        0x0e,
        0x42,
        0x5f,
        0x4b,
        0x4e,
        0xf8
      ]),
      issueSubQualifier: Uint8List.fromList([
        0xf6,
        0x2e,
        0x63,
        0xb9,
        0x47,
        0x6b,
        0xb1,
        0xf0,
        0x83,
        0x11,
        0xca,
        0xa8,
        0x9b,
        0xbc,
        0x65,
        0xa9,
        0x35,
        0x2b,
        0x6e,
        0x5f
      ]),
      issueRestricted: Uint8List.fromList([
        0xf6,
        0x2e,
        0x63,
        0xb9,
        0x45,
        0xde,
        0x7e,
        0xb2,
        0x45,
        0x3e,
        0x8f,
        0x2a,
        0x7f,
        0x18,
        0xc2,
        0xa0,
        0x4f,
        0x7e,
        0xa8,
        0xea
      ]),
      addTag: Uint8List.fromList([
        0xf4,
        0x9f,
        0x2a,
        0xd2,
        0xca,
        0x6e,
        0xd0,
        0xa2,
        0xb1,
        0x63,
        0xe1,
        0x1a,
        0xfd,
        0x54,
        0xf4,
        0x23,
        0x36,
        0xef,
        0x52,
        0x35
      ]),
      burn: Uint8List.fromList([
        0xf0,
        0x53,
        0x25,
        0xe9,
        0x0d,
        0x52,
        0x11,
        0xde,
        0xf8,
        0x6b,
        0x85,
        0x6c,
        0x95,
        0x69,
        0xe5,
        0x48,
        0x08,
        0x20,
        0x12,
        0x90
      ]),
    ),
    burnAmounts: BurnAmount(
        issueMain: 50000000000,
        reissue: 10000000000,
        issueSub: 10000000000,
        issueUnique: 500000000,
        issueMessage: 10000000000,
        issueQualifier: 100000000000,
        issueSubQualifier: 10000000000,
        issueRestricted: 150000000000,
        addTag: 10000000));

final ravencoinTestnetChaindata = Chaindata('ravencoin_testnet', 111, 196,
    18766, 1585159200, Uint8List.fromList([0x72, 0x76, 0x6e]),
    uniquification: 1,
    symbol: 'RVN',
    burnH160s: BurnH160(
        issueMain: Uint8List.fromList([
          0xdd,
          0xa3,
          0xd2,
          0x17,
          0x97,
          0xff,
          0x26,
          0xcb,
          0x8a,
          0xe9,
          0xa7,
          0x69,
          0xbd,
          0xc6,
          0x8c,
          0xf4,
          0x56,
          0x7f,
          0x5b,
          0xba
        ]),
        reissue: Uint8List.fromList([
          0xda,
          0x61,
          0xc4,
          0x7a,
          0xdb,
          0xad,
          0x4a,
          0x81,
          0xe5,
          0xf1,
          0x4e,
          0x1f,
          0xab,
          0xb3,
          0xd1,
          0x67,
          0xa5,
          0x1c,
          0xa4,
          0x48
        ]),
        issueSub: Uint8List.fromList([
          0xdd,
          0xa3,
          0xd2,
          0x17,
          0xab,
          0xd5,
          0x98,
          0x7f,
          0x0e,
          0xd5,
          0x9f,
          0x73,
          0xf2,
          0x0c,
          0xe4,
          0xe3,
          0xe1,
          0xfc,
          0xe9,
          0x82
        ]),
        issueUnique: Uint8List.fromList([
          0xdd,
          0xa3,
          0xd2,
          0x17,
          0xae,
          0x29,
          0xb7,
          0x3b,
          0xa1,
          0x3d,
          0x29,
          0x14,
          0x29,
          0xca,
          0xd4,
          0x3c,
          0xd1,
          0x22,
          0x75,
          0x62
        ]),
        issueMessage: Uint8List.fromList([
          0xdd,
          0xa3,
          0xd2,
          0x17,
          0xa5,
          0x9b,
          0x0f,
          0x55,
          0x0d,
          0x69,
          0xeb,
          0x3b,
          0xe2,
          0xbd,
          0xcf,
          0x28,
          0x83,
          0xb9,
          0x45,
          0x8b
        ]),
        issueQualifier: Uint8List.fromList([
          0xdd,
          0xa3,
          0xd2,
          0x17,
          0xa9,
          0x5b,
          0xe2,
          0x2e,
          0x56,
          0x89,
          0xac,
          0xf1,
          0x50,
          0xd5,
          0x53,
          0x0d,
          0x7a,
          0x26,
          0x2d,
          0x9c
        ]),
        issueSubQualifier: Uint8List.fromList([
          0xdd,
          0xa3,
          0xd2,
          0x17,
          0xab,
          0xd5,
          0x9e,
          0x53,
          0xfe,
          0xbf,
          0x37,
          0xaf,
          0x27,
          0x39,
          0xaa,
          0x74,
          0x50,
          0x06,
          0x4d,
          0x03
        ]),
        issueRestricted: Uint8List.fromList([
          0xdd,
          0xa3,
          0xd2,
          0x17,
          0xaa,
          0x48,
          0x6b,
          0x15,
          0xc0,
          0xeb,
          0xfc,
          0x31,
          0x0a,
          0x96,
          0x07,
          0x6b,
          0x6a,
          0x59,
          0x87,
          0x8e
        ]),
        addTag: Uint8List.fromList([
          0xdc,
          0x14,
          0x99,
          0x31,
          0x2e,
          0xd8,
          0xbd,
          0x06,
          0x2d,
          0x11,
          0x4e,
          0x21,
          0x88,
          0xd2,
          0x38,
          0xee,
          0x51,
          0xca,
          0x30,
          0xd9
        ]),
        burn: Uint8List.fromList([
          0xd7,
          0xc8,
          0x94,
          0x47,
          0x71,
          0xbb,
          0xfe,
          0x42,
          0x74,
          0x18,
          0xf2,
          0x73,
          0x20,
          0xe7,
          0x2a,
          0x13,
          0x22,
          0xfa,
          0xf1,
          0x34
        ])),
    burnAmounts: BurnAmount(
        issueMain: 50000000000,
        reissue: 10000000000,
        issueSub: 10000000000,
        issueUnique: 500000000,
        issueMessage: 10000000000,
        issueQualifier: 100000000000,
        issueSubQualifier: 10000000000,
        issueRestricted: 150000000000,
        addTag: 10000000));

final evrmoreMainnetChaindata = Chaindata(
    'evrmore_mainnet', 33, 92, 8819, 0, Uint8List.fromList([0x65, 0x76, 0x72]),
    symbol: 'EVR',
    burnH160s: BurnH160(
      issueMain: Uint8List.fromList([
        0x9f,
        0xce,
        0x23,
        0xb5,
        0xea,
        0xb1,
        0xad,
        0x3c,
        0x1d,
        0x68,
        0x92,
        0xcc,
        0xb7,
        0xf7,
        0xc9,
        0x24,
        0x74,
        0x54,
        0xdf,
        0x98
      ]),
      reissue: Uint8List.fromList([
        0x9c,
        0x8c,
        0x16,
        0x19,
        0x2e,
        0x5f,
        0xd0,
        0xf2,
        0x78,
        0x70,
        0x39,
        0x82,
        0xa5,
        0xe5,
        0x0d,
        0x97,
        0xc2,
        0xf2,
        0x28,
        0x26
      ]),
      issueSub: Uint8List.fromList([
        0x9f,
        0xce,
        0x23,
        0xb5,
        0xfe,
        0x88,
        0x1e,
        0xef,
        0xa1,
        0x54,
        0x8a,
        0xd6,
        0xec,
        0x3e,
        0x21,
        0x13,
        0xff,
        0xd2,
        0x6d,
        0x60
      ]),
      issueUnique: Uint8List.fromList([
        0x9f,
        0xce,
        0x23,
        0xb6,
        0x00,
        0xdc,
        0x3d,
        0xac,
        0x33,
        0xbc,
        0x14,
        0x77,
        0x23,
        0xfc,
        0x10,
        0x6c,
        0xee,
        0xf7,
        0xf9,
        0x40
      ]),
      issueMessage: Uint8List.fromList([
        0x9f,
        0xce,
        0x23,
        0xb5,
        0xf8,
        0x4d,
        0x95,
        0xc5,
        0x9f,
        0xe8,
        0xd6,
        0x9e,
        0xdc,
        0xef,
        0x0b,
        0x58,
        0xa1,
        0x8e,
        0xc9,
        0x69
      ]),
      issueQualifier: Uint8List.fromList([
        0x9f,
        0xce,
        0x23,
        0xb5,
        0xfc,
        0x0e,
        0x68,
        0x9e,
        0xe9,
        0x08,
        0x98,
        0x54,
        0x4b,
        0x06,
        0x8f,
        0x3d,
        0x97,
        0xfb,
        0xb1,
        0x7a
      ]),
      issueSubQualifier: Uint8List.fromList([
        0x9f,
        0xce,
        0x23,
        0xb5,
        0xfe,
        0x88,
        0x24,
        0xc4,
        0x91,
        0x3e,
        0x23,
        0x12,
        0x21,
        0x6a,
        0xe6,
        0xa4,
        0x6d,
        0xdb,
        0xd0,
        0xe1
      ]),
      issueRestricted: Uint8List.fromList([
        0x9f,
        0xce,
        0x23,
        0xb5,
        0xfc,
        0xfa,
        0xf1,
        0x86,
        0x53,
        0x6a,
        0xe7,
        0x94,
        0x04,
        0xc7,
        0x43,
        0x9b,
        0x88,
        0x2f,
        0x0b,
        0x6c
      ]),
      addTag: Uint8List.fromList([
        0x9e,
        0x3e,
        0xea,
        0xcf,
        0x81,
        0x8b,
        0x43,
        0x76,
        0xbf,
        0x90,
        0x39,
        0x84,
        0x83,
        0x03,
        0x75,
        0x1e,
        0x6f,
        0x9f,
        0xb4,
        0xb7
      ]),
      burn: Uint8List.fromList([
        0x99,
        0xf2,
        0xe5,
        0xe5,
        0xc4,
        0x6e,
        0x84,
        0xb3,
        0x06,
        0x97,
        0xdd,
        0xd6,
        0x1b,
        0x18,
        0x66,
        0x43,
        0x40,
        0xd0,
        0x75,
        0x12
      ]),
    ),
    burnAmounts: BurnAmount(
        // same
        issueMain: 50000000000,
        reissue: 10000000000,
        issueSub: 10000000000,
        issueUnique: 500000000,
        issueMessage: 10000000000,
        issueQualifier: 100000000000,
        issueSubQualifier: 10000000000,
        issueRestricted: 150000000000,
        addTag: 10000000));

// Evrmore testnet uses sha256 headers, so make the kawpow activation height max (web dart?) int
final evrmoreTestnetChaindata = Chaindata('evrmore_testnet', 111, 196, 18819,
    (2 << 53) - 1, Uint8List.fromList([0x65, 0x76, 0x72]),
    uniquification: 2,
    symbol: 'EVR',
    burnH160s: BurnH160(
        issueMain: Uint8List.fromList([
          0xdd,
          0xa3,
          0xd2,
          0x17,
          0x97,
          0xff,
          0x26,
          0xcb,
          0x8a,
          0xe9,
          0xa7,
          0x69,
          0xbd,
          0xc6,
          0x8c,
          0xf4,
          0x56,
          0x7f,
          0x5b,
          0xba
        ]),
        reissue: Uint8List.fromList([
          0xda,
          0x61,
          0xc4,
          0x7a,
          0xdb,
          0xad,
          0x4a,
          0x81,
          0xe5,
          0xf1,
          0x4e,
          0x1f,
          0xab,
          0xb3,
          0xd1,
          0x67,
          0xa5,
          0x1c,
          0xa4,
          0x48
        ]),
        issueSub: Uint8List.fromList([
          0xdd,
          0xa3,
          0xd2,
          0x17,
          0xab,
          0xd5,
          0x98,
          0x7f,
          0x0e,
          0xd5,
          0x9f,
          0x73,
          0xf2,
          0x0c,
          0xe4,
          0xe3,
          0xe1,
          0xfc,
          0xe9,
          0x82
        ]),
        issueUnique: Uint8List.fromList([
          0xdd,
          0xa3,
          0xd2,
          0x17,
          0xae,
          0x29,
          0xb7,
          0x3b,
          0xa1,
          0x3d,
          0x29,
          0x14,
          0x29,
          0xca,
          0xd4,
          0x3c,
          0xd1,
          0x22,
          0x75,
          0x62
        ]),
        issueMessage: Uint8List.fromList([
          0xdd,
          0xa3,
          0xd2,
          0x17,
          0xa5,
          0x9b,
          0x0f,
          0x55,
          0x0d,
          0x69,
          0xeb,
          0x3b,
          0xe2,
          0xbd,
          0xcf,
          0x28,
          0x83,
          0xb9,
          0x45,
          0x8b
        ]),
        issueQualifier: Uint8List.fromList([
          0xdd,
          0xa3,
          0xd2,
          0x17,
          0xa9,
          0x5b,
          0xe2,
          0x2e,
          0x56,
          0x89,
          0xac,
          0xf1,
          0x50,
          0xd5,
          0x53,
          0x0d,
          0x7a,
          0x26,
          0x2d,
          0x9c
        ]),
        issueSubQualifier: Uint8List.fromList([
          0xdd,
          0xa3,
          0xd2,
          0x17,
          0xab,
          0xd5,
          0x9e,
          0x53,
          0xfe,
          0xbf,
          0x37,
          0xaf,
          0x27,
          0x39,
          0xaa,
          0x74,
          0x50,
          0x06,
          0x4d,
          0x03
        ]),
        issueRestricted: Uint8List.fromList([
          0xdd,
          0xa3,
          0xd2,
          0x17,
          0xaa,
          0x48,
          0x6b,
          0x15,
          0xc0,
          0xeb,
          0xfc,
          0x31,
          0x0a,
          0x96,
          0x07,
          0x6b,
          0x6a,
          0x59,
          0x87,
          0x8e
        ]),
        addTag: Uint8List.fromList([
          0xdc,
          0x14,
          0x99,
          0x31,
          0x2e,
          0xd8,
          0xbd,
          0x06,
          0x2d,
          0x11,
          0x4e,
          0x21,
          0x88,
          0xd2,
          0x38,
          0xee,
          0x51,
          0xca,
          0x30,
          0xd9
        ]),
        burn: Uint8List.fromList([
          0xd7,
          0xc8,
          0x94,
          0x47,
          0x71,
          0xbb,
          0xfe,
          0x42,
          0x74,
          0x18,
          0xf2,
          0x73,
          0x20,
          0xe7,
          0x2a,
          0x13,
          0x22,
          0xfa,
          0xf1,
          0x34
        ])),
    burnAmounts: BurnAmount(
        // same
        issueMain: 50000000000,
        reissue: 10000000000,
        issueSub: 10000000000,
        issueUnique: 500000000,
        issueMessage: 10000000000,
        issueQualifier: 100000000000,
        issueSubQualifier: 10000000000,
        issueRestricted: 150000000000,
        addTag: 10000000));

Chaindata getChaindataFor(String chain) {
  switch (chain) {
    case 'ravencoin_mainnet':
      return ravencoinMainnetChaindata;
    case 'ravencoin_testnet':
      return ravencoinTestnetChaindata;
    case 'evrmore_mainnet':
      return evrmoreMainnetChaindata;
    case 'evrmore_testnet':
      return evrmoreTestnetChaindata;
  }
  return ravencoinMainnetChaindata;
}
